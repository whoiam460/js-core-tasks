{"ast":null,"code":"var _jsxFileName = \"/home/andry/\\u0421\\u0442\\u0456\\u043B\\u044C\\u043D\\u0438\\u0446\\u044F/tests/js-core-tasks/react/react-task-2/src/compponents/taskTvelve.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TaskTvelve = () => {\n  _s();\n\n  let [value, chooseValue] = useState(false);\n\n  const toggle = i => {\n    if (value !== i) {\n      return chooseValue(i);\n    }\n  };\n\n  const renderElements = [...Array(5)].map((item, i) => {\n    i += 1;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `#${value}`,\n        onClick: () => toggle(i),\n        style: {\n          color: value == i ? \"#000\" : \"#d33\"\n        },\n        children: i\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Task12\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => chooseValue(value -= 1),\n      style: {\n        display: `${value == 1 ? \"none\" : \"block \"}`\n      },\n      children: \"Prev\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), renderElements, /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: () => chooseValue(value += 1),\n      style: {\n        display: `${value == renderElements.length ? \"none\" : \"block\"}`\n      },\n      children: \"Next\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TaskTvelve, \"SljCPmGcxTrM60WtlaeErusX1ak=\");\n\n_c = TaskTvelve;\nexport default TaskTvelve;\n\nvar _c;\n\n$RefreshReg$(_c, \"TaskTvelve\");","map":{"version":3,"sources":["/home/andry/Стільниця/tests/js-core-tasks/react/react-task-2/src/compponents/taskTvelve.js"],"names":["React","useState","TaskTvelve","value","chooseValue","toggle","i","renderElements","Array","map","item","color","display","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAGA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACvB,MAAI,CAACC,KAAD,EAAQC,WAAR,IAAuBH,QAAQ,CAAC,KAAD,CAAnC;;AAEA,QAAMI,MAAM,GAAGC,CAAC,IAAI;AAClB,QAAIH,KAAK,KAAKG,CAAd,EAAiB;AACf,aAAOF,WAAW,CAACE,CAAD,CAAlB;AACD;AACF,GAJD;;AAMA,QAAMC,cAAc,GAAG,CAAC,GAAGC,KAAK,CAAC,CAAD,CAAT,EAAcC,GAAd,CAAkB,CAACC,IAAD,EAAOJ,CAAP,KAAa;AACpDA,IAAAA,CAAC,IAAI,CAAL;AACA,wBACE;AAAA,6BACE;AACE,QAAA,IAAI,EAAG,IAAGH,KAAM,EADlB;AAEE,QAAA,OAAO,EAAE,MAAME,MAAM,CAACC,CAAD,CAFvB;AAGE,QAAA,KAAK,EAAE;AAAEK,UAAAA,KAAK,EAAER,KAAK,IAAIG,CAAT,GAAa,MAAb,GAAsB;AAA/B,SAHT;AAAA,kBAIGA;AAJH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,GAZsB,CAAvB;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACE;AACE,MAAA,OAAO,EAAE,MAAMF,WAAW,CAAED,KAAK,IAAI,CAAX,CAD5B;AAEE,MAAA,KAAK,EAAG;AAACS,QAAAA,OAAO,EAAE,GAAET,KAAK,IAAI,CAAT,GAAa,MAAb,GAAsB,QAAS;AAA3C,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAOGI,cAPH,eASE;AACE,MAAA,OAAO,EAAE,MAAMH,WAAW,CAAED,KAAK,IAAI,CAAX,CAD5B;AAGE,MAAA,KAAK,EAAG;AAACS,QAAAA,OAAO,EAAE,GAAET,KAAK,IAAII,cAAc,CAACM,MAAxB,GAAiC,MAAjC,GAA0C,OAAQ;AAA9D,OAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CAzCD;;GAAMX,U;;KAAAA,U;AA2CN,eAAeA,UAAf","sourcesContent":["import React, { useState } from \"react\"\n\n\nconst TaskTvelve = () => {\n  let [value, chooseValue] = useState(false)\n\n  const toggle = i => {\n    if (value !== i) {\n      return chooseValue(i)\n    }\n  }\n\n  const renderElements = [...Array(5)].map((item, i) => {\n    i += 1\n    return (\n      <span>\n        <a\n          href={`#${value}`}\n          onClick={() => toggle(i)}\n          style={{ color: value == i ? \"#000\" : \"#d33\" }}>\n          {i}\n        </a>\n      </span>\n    )\n  })\n\n  return (\n    <div className=\"Task12\">\n      <div\n        onClick={() => chooseValue((value -= 1))}\n        style={ {display:`${value == 1 ? \"none\" : \"block \"}` }}>\n        Prev\n      </div>\n\n      {renderElements}\n\n      <div\n        onClick={() => chooseValue((value += 1))}\n        \n        style={ {display:`${value == renderElements.length ? \"none\" : \"block\"}` }}>\n        Next\n      </div>\n    </div>\n  )\n}\n\nexport default TaskTvelve"]},"metadata":{},"sourceType":"module"}